


SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE SCHEMA IF NOT EXISTS "public";


ALTER SCHEMA "public" OWNER TO "pg_database_owner";


COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO 'public'
    AS $$
begin
  insert into public.profiles (user_id)
  values (new.id);
  return new;
end;
$$;


ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."update_updated_at_column"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$;


ALTER FUNCTION "public"."update_updated_at_column"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."competitors" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "created_by" "uuid" DEFAULT "auth"."uid"(),
    "workspace" bigint NOT NULL,
    "name" "text" NOT NULL,
    "website" "text",
    "website_info" "text",
    "website_summary" "text"
);


ALTER TABLE "public"."competitors" OWNER TO "postgres";


ALTER TABLE "public"."competitors" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."competitor_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."keywords" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL,
    "similar_words" "text"[],
    "value" "text" NOT NULL,
    "process" boolean DEFAULT true NOT NULL
);


ALTER TABLE "public"."keywords" OWNER TO "postgres";


ALTER TABLE "public"."keywords" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."keyword_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."workspaces" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp without time zone DEFAULT "now"() NOT NULL,
    "owner" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "name" "text" NOT NULL,
    "website" "text",
    "website_md" "text",
    "company" "text" NOT NULL,
    "employees" "text",
    "website_ai" "text",
    "keywords_suggested" "text"[]
);


ALTER TABLE "public"."workspaces" OWNER TO "postgres";


ALTER TABLE "public"."workspaces" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."organization_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."workspaces_keywords" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "workspace" bigint NOT NULL,
    "keyword" bigint NOT NULL,
    "created_by" "uuid" DEFAULT "auth"."uid"()
);


ALTER TABLE "public"."workspaces_keywords" OWNER TO "postgres";


ALTER TABLE "public"."workspaces_keywords" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."organization_keywords_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."workspaces_subreddits" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "created_by" "uuid",
    "subreddit" bigint NOT NULL,
    "workspace" bigint NOT NULL
);


ALTER TABLE "public"."workspaces_subreddits" OWNER TO "postgres";


ALTER TABLE "public"."workspaces_subreddits" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."organization_subreddits_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "user_id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp without time zone DEFAULT "now"() NOT NULL,
    "workspace" bigint,
    "name" "text",
    "onboarding" smallint DEFAULT '0'::smallint NOT NULL,
    "onboarded" boolean DEFAULT false NOT NULL,
    "role" "text"
);


ALTER TABLE "public"."profiles" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."reddit_comments" (
    "id" bigint NOT NULL,
    "imported_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "created_at" timestamp without time zone NOT NULL,
    "post" bigint NOT NULL,
    "reddit_user" bigint NOT NULL,
    "comment" "text" NOT NULL,
    "reviewed" boolean DEFAULT false NOT NULL,
    "display" boolean DEFAULT false NOT NULL,
    "sentiment" "text"
);


ALTER TABLE "public"."reddit_comments" OWNER TO "postgres";


ALTER TABLE "public"."reddit_comments" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."reddit_comment_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."reddit_comments_keywords" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "comment" bigint NOT NULL,
    "keywords" bigint NOT NULL
);


ALTER TABLE "public"."reddit_comments_keywords" OWNER TO "postgres";


ALTER TABLE "public"."reddit_comments_keywords" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."reddit_comment_keywords_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."reddit_posts" (
    "id" bigint NOT NULL,
    "imported_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "created_at" timestamp without time zone NOT NULL,
    "title" "text" NOT NULL,
    "body" "text",
    "reddit_user" bigint NOT NULL,
    "subreddit" bigint NOT NULL
);


ALTER TABLE "public"."reddit_posts" OWNER TO "postgres";


ALTER TABLE "public"."reddit_posts" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."reddit_post_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."reddit_posts_keywords" (
    "id" bigint NOT NULL,
    "post" bigint NOT NULL,
    "keyword" bigint NOT NULL,
    "created_at" timestamp without time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."reddit_posts_keywords" OWNER TO "postgres";


ALTER TABLE "public"."reddit_posts_keywords" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."reddit_post_keywords_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."reddit_users" (
    "id" bigint NOT NULL,
    "imported_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "username" "text" NOT NULL
);


ALTER TABLE "public"."reddit_users" OWNER TO "postgres";


ALTER TABLE "public"."reddit_users" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."reddit_user_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."subreddits" (
    "id" bigint NOT NULL,
    "imported_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp without time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL,
    "description" "text",
    "rules" "text",
    "created_at" "date",
    "weekly_visitors" integer,
    "weekly_contrib" integer,
    "total_members" integer,
    "image" "text",
    "title" "text",
    "description_reddit" "text"
);


ALTER TABLE "public"."subreddits" OWNER TO "postgres";


ALTER TABLE "public"."subreddits" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."subreddit_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."subreddits_keywords" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "keyword" bigint NOT NULL,
    "subreddit" bigint NOT NULL
);


ALTER TABLE "public"."subreddits_keywords" OWNER TO "postgres";


ALTER TABLE "public"."subreddits_keywords" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."subreddit_keywords_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."competitors"
    ADD CONSTRAINT "competitor_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."keywords"
    ADD CONSTRAINT "keyword_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."workspaces_keywords"
    ADD CONSTRAINT "organization_keywords_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."workspaces"
    ADD CONSTRAINT "organization_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."workspaces_subreddits"
    ADD CONSTRAINT "organization_subreddits_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profile_pkey" PRIMARY KEY ("user_id");



ALTER TABLE ONLY "public"."reddit_comments_keywords"
    ADD CONSTRAINT "reddit_comment_keywords_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."reddit_comments"
    ADD CONSTRAINT "reddit_comment_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."reddit_posts_keywords"
    ADD CONSTRAINT "reddit_post_keywords_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."reddit_posts"
    ADD CONSTRAINT "reddit_post_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."reddit_users"
    ADD CONSTRAINT "reddit_user_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."subreddits_keywords"
    ADD CONSTRAINT "subreddit_keywords_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."subreddits"
    ADD CONSTRAINT "subreddit_name_key" UNIQUE ("name");



ALTER TABLE ONLY "public"."subreddits"
    ADD CONSTRAINT "subreddit_pkey" PRIMARY KEY ("id");



CREATE UNIQUE INDEX "organizations_name_ci_idx" ON "public"."workspaces" USING "btree" ("lower"("name"));



CREATE OR REPLACE TRIGGER "set_updated_at" BEFORE UPDATE ON "public"."profiles" FOR EACH ROW EXECUTE FUNCTION "public"."update_updated_at_column"();



CREATE OR REPLACE TRIGGER "set_updated_at" BEFORE UPDATE ON "public"."subreddits" FOR EACH ROW EXECUTE FUNCTION "public"."update_updated_at_column"();



CREATE OR REPLACE TRIGGER "set_updated_at" BEFORE UPDATE ON "public"."workspaces" FOR EACH ROW EXECUTE FUNCTION "public"."update_updated_at_column"();



ALTER TABLE ONLY "public"."competitors"
    ADD CONSTRAINT "competitor_created_by_fkey" FOREIGN KEY ("created_by") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE SET NULL;



ALTER TABLE ONLY "public"."competitors"
    ADD CONSTRAINT "competitor_organization_fkey" FOREIGN KEY ("workspace") REFERENCES "public"."workspaces"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."workspaces_keywords"
    ADD CONSTRAINT "organization_keywords_created_by_fkey" FOREIGN KEY ("created_by") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE SET NULL;



ALTER TABLE ONLY "public"."workspaces_keywords"
    ADD CONSTRAINT "organization_keywords_keyword_fkey" FOREIGN KEY ("keyword") REFERENCES "public"."keywords"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."workspaces_keywords"
    ADD CONSTRAINT "organization_keywords_organization_fkey" FOREIGN KEY ("workspace") REFERENCES "public"."workspaces"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."workspaces"
    ADD CONSTRAINT "organization_owner_fkey" FOREIGN KEY ("owner") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."workspaces_subreddits"
    ADD CONSTRAINT "organization_subreddits_created_by_fkey" FOREIGN KEY ("created_by") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE SET NULL;



ALTER TABLE ONLY "public"."workspaces_subreddits"
    ADD CONSTRAINT "organization_subreddits_organization_fkey" FOREIGN KEY ("workspace") REFERENCES "public"."workspaces"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."workspaces_subreddits"
    ADD CONSTRAINT "organization_subreddits_subreddit_fkey" FOREIGN KEY ("subreddit") REFERENCES "public"."subreddits"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profile_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_workspace_fkey" FOREIGN KEY ("workspace") REFERENCES "public"."workspaces"("id") ON UPDATE CASCADE ON DELETE SET NULL;



ALTER TABLE ONLY "public"."reddit_comments_keywords"
    ADD CONSTRAINT "reddit_comment_keywords_comment_fkey" FOREIGN KEY ("comment") REFERENCES "public"."reddit_comments"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."reddit_comments_keywords"
    ADD CONSTRAINT "reddit_comment_keywords_keywords_fkey" FOREIGN KEY ("keywords") REFERENCES "public"."keywords"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."reddit_comments"
    ADD CONSTRAINT "reddit_comment_post_fkey" FOREIGN KEY ("post") REFERENCES "public"."reddit_posts"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."reddit_comments"
    ADD CONSTRAINT "reddit_comment_reddit_user_fkey" FOREIGN KEY ("reddit_user") REFERENCES "public"."reddit_posts"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."reddit_posts_keywords"
    ADD CONSTRAINT "reddit_post_keywords_keyword_fkey" FOREIGN KEY ("keyword") REFERENCES "public"."keywords"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."reddit_posts_keywords"
    ADD CONSTRAINT "reddit_post_keywords_post_fkey" FOREIGN KEY ("post") REFERENCES "public"."reddit_posts"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."reddit_posts"
    ADD CONSTRAINT "reddit_post_reddit_user_fkey" FOREIGN KEY ("reddit_user") REFERENCES "public"."reddit_users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."reddit_posts"
    ADD CONSTRAINT "reddit_post_subreddit_fkey" FOREIGN KEY ("subreddit") REFERENCES "public"."subreddits"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."subreddits_keywords"
    ADD CONSTRAINT "subreddit_keywords_keyword_fkey" FOREIGN KEY ("keyword") REFERENCES "public"."keywords"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."subreddits_keywords"
    ADD CONSTRAINT "subreddit_keywords_subreddit_fkey" FOREIGN KEY ("subreddit") REFERENCES "public"."subreddits"("id") ON UPDATE CASCADE ON DELETE CASCADE;



CREATE POLICY "Enable insert for authenticated users only" ON "public"."keywords" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "public"."subreddits" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable read access for all authenticated users" ON "public"."keywords" FOR SELECT TO "authenticated" USING (true);



CREATE POLICY "Enable read access for all authenticated users" ON "public"."subreddits" FOR SELECT TO "authenticated" USING (true);



CREATE POLICY "Enable users to view their own data only" ON "public"."profiles" FOR SELECT TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Only enable users to edit their own profile" ON "public"."profiles" FOR UPDATE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Only owner and member of organization can delete" ON "public"."workspaces_subreddits" FOR DELETE TO "authenticated" USING (((EXISTS ( SELECT 1
   FROM "public"."workspaces" "w"
  WHERE (("w"."id" = "workspaces_subreddits"."workspace") AND ("w"."owner" = "auth"."uid"())))) OR (EXISTS ( SELECT 1
   FROM "public"."profiles" "p"
  WHERE (("p"."user_id" = "auth"."uid"()) AND ("p"."workspace" = "workspaces_subreddits"."workspace"))))));



CREATE POLICY "Only owner and member of organization can select" ON "public"."workspaces_subreddits" FOR SELECT TO "authenticated" USING (((EXISTS ( SELECT 1
   FROM "public"."workspaces" "w"
  WHERE (("w"."id" = "workspaces_subreddits"."workspace") AND ("w"."owner" = "auth"."uid"())))) OR (EXISTS ( SELECT 1
   FROM "public"."profiles" "p"
  WHERE (("p"."user_id" = "auth"."uid"()) AND ("p"."workspace" = "workspaces_subreddits"."workspace"))))));



CREATE POLICY "Only owner and members of organization can delete" ON "public"."competitors" FOR DELETE TO "authenticated" USING (((EXISTS ( SELECT 1
   FROM "public"."workspaces" "w"
  WHERE (("w"."id" = "competitors"."workspace") AND ("w"."owner" = "auth"."uid"())))) OR (EXISTS ( SELECT 1
   FROM "public"."profiles" "p"
  WHERE (("p"."user_id" = "auth"."uid"()) AND ("p"."workspace" = "competitors"."workspace"))))));



CREATE POLICY "Only owner and members of organization can delete" ON "public"."workspaces_keywords" FOR DELETE TO "authenticated" USING (((EXISTS ( SELECT 1
   FROM "public"."workspaces" "w"
  WHERE (("w"."id" = "workspaces_keywords"."workspace") AND ("w"."owner" = "auth"."uid"())))) OR (EXISTS ( SELECT 1
   FROM "public"."profiles" "p"
  WHERE (("p"."user_id" = "auth"."uid"()) AND ("p"."workspace" = "workspaces_keywords"."workspace"))))));



CREATE POLICY "Only owner and members of organization can insert" ON "public"."competitors" FOR INSERT TO "authenticated" WITH CHECK ((((EXISTS ( SELECT 1
   FROM "public"."workspaces" "w"
  WHERE (("w"."id" = "competitors"."workspace") AND ("w"."owner" = "auth"."uid"())))) OR (EXISTS ( SELECT 1
   FROM "public"."profiles" "p"
  WHERE (("p"."user_id" = "auth"."uid"()) AND ("p"."workspace" = "competitors"."workspace"))))) AND ("created_by" = "auth"."uid"())));



CREATE POLICY "Only owner and members of organization can insert" ON "public"."workspaces_keywords" FOR INSERT TO "authenticated" WITH CHECK ((((EXISTS ( SELECT 1
   FROM "public"."workspaces" "w"
  WHERE (("w"."id" = "workspaces_keywords"."workspace") AND ("w"."owner" = "auth"."uid"())))) OR ((EXISTS ( SELECT 1
   FROM "public"."profiles" "p"
  WHERE (("p"."user_id" = "auth"."uid"()) AND ("p"."workspace" = "workspaces_keywords"."workspace")))) AND ("created_by" = "auth"."uid"()))) AND ("created_by" = "auth"."uid"())));



CREATE POLICY "Only owner and members of organization can insert" ON "public"."workspaces_subreddits" FOR INSERT TO "authenticated" WITH CHECK ((((EXISTS ( SELECT 1
   FROM "public"."workspaces" "w"
  WHERE (("w"."id" = "workspaces_subreddits"."workspace") AND ("w"."owner" = "auth"."uid"())))) OR (EXISTS ( SELECT 1
   FROM "public"."profiles" "p"
  WHERE (("p"."user_id" = "auth"."uid"()) AND ("p"."workspace" = "workspaces_subreddits"."workspace"))))) AND ("created_by" = "auth"."uid"())));



CREATE POLICY "Only owner and members of organization can select" ON "public"."workspaces_keywords" FOR SELECT TO "authenticated" USING (((EXISTS ( SELECT 1
   FROM "public"."workspaces" "w"
  WHERE (("w"."id" = "workspaces_keywords"."workspace") AND ("w"."owner" = "auth"."uid"())))) OR (EXISTS ( SELECT 1
   FROM "public"."profiles" "p"
  WHERE (("p"."user_id" = "auth"."uid"()) AND ("p"."workspace" = "workspaces_keywords"."workspace"))))));



CREATE POLICY "Only owner and members of organization can update" ON "public"."competitors" FOR UPDATE TO "authenticated" USING (((EXISTS ( SELECT 1
   FROM "public"."workspaces" "w"
  WHERE (("w"."id" = "competitors"."workspace") AND ("w"."owner" = "auth"."uid"())))) OR (EXISTS ( SELECT 1
   FROM "public"."profiles" "p"
  WHERE (("p"."user_id" = "auth"."uid"()) AND ("p"."workspace" = "competitors"."workspace")))))) WITH CHECK (((EXISTS ( SELECT 1
   FROM "public"."workspaces" "w"
  WHERE (("w"."id" = "competitors"."workspace") AND ("w"."owner" = "auth"."uid"())))) OR (EXISTS ( SELECT 1
   FROM "public"."profiles" "p"
  WHERE (("p"."user_id" = "auth"."uid"()) AND ("p"."workspace" = "competitors"."workspace"))))));



CREATE POLICY "Only owner and members of orgnization can select" ON "public"."competitors" FOR SELECT TO "authenticated" USING (((EXISTS ( SELECT 1
   FROM "public"."workspaces" "w"
  WHERE (("w"."id" = "competitors"."workspace") AND ("w"."owner" = "auth"."uid"())))) OR (EXISTS ( SELECT 1
   FROM "public"."profiles" "p"
  WHERE (("p"."user_id" = "auth"."uid"()) AND ("p"."workspace" = "competitors"."workspace"))))));



CREATE POLICY "Owner of members can select" ON "public"."workspaces" FOR SELECT USING ((("auth"."uid"() = "owner") OR (EXISTS ( SELECT 1
   FROM "public"."profiles" "p"
  WHERE (("p"."user_id" = "auth"."uid"()) AND ("p"."workspace" = "workspaces"."id"))))));



CREATE POLICY "Update Owner of Member" ON "public"."workspaces" FOR UPDATE TO "authenticated" USING ((("auth"."uid"() = "owner") OR (EXISTS ( SELECT 1
   FROM "public"."profiles" "p"
  WHERE (("p"."user_id" = "auth"."uid"()) AND ("p"."workspace" = "workspaces"."id")))))) WITH CHECK ((("auth"."uid"() = "owner") OR (EXISTS ( SELECT 1
   FROM "public"."profiles" "p"
  WHERE (("p"."user_id" = "auth"."uid"()) AND ("p"."workspace" = "workspaces"."id"))))));



CREATE POLICY "User can create their own organization" ON "public"."workspaces" FOR INSERT TO "authenticated" WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "owner"));



ALTER TABLE "public"."competitors" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."keywords" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."reddit_comments" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."reddit_comments_keywords" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."reddit_posts" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."reddit_posts_keywords" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."reddit_users" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."subreddits" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."subreddits_keywords" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."workspaces" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."workspaces_keywords" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."workspaces_subreddits" ENABLE ROW LEVEL SECURITY;


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";



GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";



GRANT ALL ON FUNCTION "public"."update_updated_at_column"() TO "anon";
GRANT ALL ON FUNCTION "public"."update_updated_at_column"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."update_updated_at_column"() TO "service_role";



GRANT ALL ON TABLE "public"."competitors" TO "anon";
GRANT ALL ON TABLE "public"."competitors" TO "authenticated";
GRANT ALL ON TABLE "public"."competitors" TO "service_role";



GRANT ALL ON SEQUENCE "public"."competitor_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."competitor_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."competitor_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."keywords" TO "anon";
GRANT ALL ON TABLE "public"."keywords" TO "authenticated";
GRANT ALL ON TABLE "public"."keywords" TO "service_role";



GRANT ALL ON SEQUENCE "public"."keyword_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."keyword_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."keyword_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."workspaces" TO "anon";
GRANT ALL ON TABLE "public"."workspaces" TO "authenticated";
GRANT ALL ON TABLE "public"."workspaces" TO "service_role";



GRANT ALL ON SEQUENCE "public"."organization_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."organization_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."organization_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."workspaces_keywords" TO "anon";
GRANT ALL ON TABLE "public"."workspaces_keywords" TO "authenticated";
GRANT ALL ON TABLE "public"."workspaces_keywords" TO "service_role";



GRANT ALL ON SEQUENCE "public"."organization_keywords_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."organization_keywords_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."organization_keywords_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."workspaces_subreddits" TO "anon";
GRANT ALL ON TABLE "public"."workspaces_subreddits" TO "authenticated";
GRANT ALL ON TABLE "public"."workspaces_subreddits" TO "service_role";



GRANT ALL ON SEQUENCE "public"."organization_subreddits_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."organization_subreddits_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."organization_subreddits_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";



GRANT ALL ON TABLE "public"."reddit_comments" TO "anon";
GRANT ALL ON TABLE "public"."reddit_comments" TO "authenticated";
GRANT ALL ON TABLE "public"."reddit_comments" TO "service_role";



GRANT ALL ON SEQUENCE "public"."reddit_comment_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."reddit_comment_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."reddit_comment_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."reddit_comments_keywords" TO "anon";
GRANT ALL ON TABLE "public"."reddit_comments_keywords" TO "authenticated";
GRANT ALL ON TABLE "public"."reddit_comments_keywords" TO "service_role";



GRANT ALL ON SEQUENCE "public"."reddit_comment_keywords_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."reddit_comment_keywords_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."reddit_comment_keywords_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."reddit_posts" TO "anon";
GRANT ALL ON TABLE "public"."reddit_posts" TO "authenticated";
GRANT ALL ON TABLE "public"."reddit_posts" TO "service_role";



GRANT ALL ON SEQUENCE "public"."reddit_post_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."reddit_post_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."reddit_post_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."reddit_posts_keywords" TO "anon";
GRANT ALL ON TABLE "public"."reddit_posts_keywords" TO "authenticated";
GRANT ALL ON TABLE "public"."reddit_posts_keywords" TO "service_role";



GRANT ALL ON SEQUENCE "public"."reddit_post_keywords_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."reddit_post_keywords_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."reddit_post_keywords_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."reddit_users" TO "anon";
GRANT ALL ON TABLE "public"."reddit_users" TO "authenticated";
GRANT ALL ON TABLE "public"."reddit_users" TO "service_role";



GRANT ALL ON SEQUENCE "public"."reddit_user_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."reddit_user_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."reddit_user_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."subreddits" TO "anon";
GRANT ALL ON TABLE "public"."subreddits" TO "authenticated";
GRANT ALL ON TABLE "public"."subreddits" TO "service_role";



GRANT ALL ON SEQUENCE "public"."subreddit_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."subreddit_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."subreddit_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."subreddits_keywords" TO "anon";
GRANT ALL ON TABLE "public"."subreddits_keywords" TO "authenticated";
GRANT ALL ON TABLE "public"."subreddits_keywords" TO "service_role";



GRANT ALL ON SEQUENCE "public"."subreddit_keywords_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."subreddit_keywords_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."subreddit_keywords_id_seq" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "service_role";







RESET ALL;
